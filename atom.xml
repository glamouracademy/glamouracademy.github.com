<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sippin' on Syntactic Sugar]]></title>
  <link href="http://glamouracademy.github.io/atom.xml" rel="self"/>
  <link href="http://glamouracademy.github.io/"/>
  <updated>2014-08-06T13:49:16-04:00</updated>
  <id>http://glamouracademy.github.io/</id>
  <author>
    <name><![CDATA[Charlotte Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3 tips for learning code (and loving to learn code) as a newb]]></title>
    <link href="http://glamouracademy.github.io/blog/2014/08/06/3-tips-for-learning-code-and-loving-to-learn-code-as-a-newb/"/>
    <updated>2014-08-06T11:45:00-04:00</updated>
    <id>http://glamouracademy.github.io/blog/2014/08/06/3-tips-for-learning-code-and-loving-to-learn-code-as-a-newb</id>
    <content type="html"><![CDATA[<p>Learning can be hard. There I said it.  So, here are a few tips to help deal with learning to code:</p>

<ol>
<li> <strong>30 min limit</strong>: if you are running into a problem for more than 30 min.  put it down.  don’t continue to bang your head against the wall.  It’s frustrating.  (FWIW There are lots of real studies about the benefits of taking breaks and there are even more apps that try to help you incorporate breaks like Time Out.)
<ul>
  <li><em>More time spent doesn’t necessarily mean getting closer to the solution</em> - you’re a newb you’re still establishing context and code prowress thus there’s a greater possibility that you can go off track and also get more and more frustrated (which doesn’t help)</li>
  <li><em>Have a few things that you want to work on.</em> put the one you’re having problems with down and work on something else.  it helps to have a set of things you’d like to do that vary in terms of size, difficulty, and interest.  A mental break that I learned from The Flatiron School, and continue to do, is taking the time to learn about a programmer (e.g. Programmer of the Day).</li>
  <li><em>Do approach the problem later with a fresh start</em> - either by just giving yourself time to digest, reaching out to others, or researching online.</li>
</ul>
</li>
<br>
<li> <strong>Break it down.</strong> A classic exercise that you might learn when beginning to think like a coder is explaining to an alien how to make a peanut butter sandwich.  When you first approach this you’re thinking ’no problem!  I’ve done this like in real life even!’  You know every step.  But when you start writing the steps, you start to realize how many tasks comprise a step.  For instance, &#8216;spreading peanut butter on a slice of bread&#8217; seems like a reasonable step right?  But do we need to explain where to get the peanut butter?  Is it in the cupboard or fridge?  Do we need to explain how to open a jar of peanut butter?  Does the alien have fingers, hands and wrists like us so that it can actually twist the lid off the jar?  Do we need to explain how to get peanut butter on the knife?  So you are the alien.  And making a peanut butter sandwich is coding.  It’s foreign to you.  And you can’t take for granted the little things.  And it’s easy to get overwhelmed.  So break things down into smaller achievable steps.  You’ll feel like you’re making progress (which you are) and you won’t have to deal with the overhead of thinking about too much stuff - which can be frustrating at best and debilitating at worst.  If you are an avid advocate strategist like myself, you can take the main goal and break it down into smaller (still too big to work on) steps before taking one of the steps and breaking it down into tasks.  (This always helps me by confirming the context and also making sure I’m not losing sight of the larger goal, which I assume is the thing that provides value.)
</li>
<br>
<li><strong>Be good to yourself.</strong> I can’t stress this enough. This is hard.  And you’re learning.  Be patient.
<ul>
  <li><em>Celebrate your successes.</em>  We tend to get caught up in success being determined in a black or white, binary type of situation.  Did it get done?  But this is not a helpful way to think when learning something.  I find better ways to measure success by answering: are you solidifying your understanding of something? are you learning something new? did you make progress toward a larger goal?  I’d even go as far as to reward yourself for little things. You might have run a marathon or trained for a marathon or know someone that has.  Almost all people (seriously like 99%) train for a marathon.  Their goal is a marathon.  But they don’t just wake up and run 26.2 mi.  They start prepping months before and it’s multiple runs a week and NONE of them in fact are ever 26.2 mi!  They are training.  You are training.  And one day, you are able to run a marathon.</li>
  <li><em>Be good to one another.</em> A criticism that I have for bootcamps is the natural tendency for students to compete against one another.  And since folks are new, learning lots of stuff fast, and thus, feeling insecure, there’s all sorts of psychological ways this plays out.  One reason I &lt;3 Ruby is because of the saying “Matz is nice so we are nice.”  Be good to one another.  Maybe you know the answer that someone doesn’t know the answer to, but be cognizant that s/he might have been banging their head on the wall way longer than s/he should have been.  Flippantly giving an answer is helpful but the other person may already feel dumb.  Sometimes it’s not just about the right answer or code golf.</li>
</ol>


<p>Learning is hard.  You’re doing something new.  You’re brave for even trying.  So listen you might be having a bad day, maybe go do some online tutorials, but whatever you do &ndash; you can do it and get on with your bad self.  After all, you might be instead just sitting in front of the tele eating a bag of chips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Tech: 5 tips from a newb's point of view]]></title>
    <link href="http://glamouracademy.github.io/blog/2014/07/22/teaching-tech-a-newbs-point-of-view/"/>
    <updated>2014-07-22T17:45:00-04:00</updated>
    <id>http://glamouracademy.github.io/blog/2014/07/22/teaching-tech-a-newbs-point-of-view</id>
    <content type="html"><![CDATA[<p>I’m sitting in a large chain bookstore in a suburb of Cleveland in front of the Sci Fi/Fantasy section, which somehow gives me the cred to blog about how to get more diversity in tech.</p>

<p>For years “people” have been talking about increasing diversity in tech and there has been a lot of organizations and support &ndash; i.e. <a href="http://www.womenwhocode.com/">women who code</a>, <a href="http://www.meetup.com/blktechies/">black techies</a>, <a href="http://www.girldevelopit.com/"> girl develop it</a>, etc.  This blog post isn’t about them.</p>

<p>This blog post is about the self-proclaimed change agents working within tech…basically those embedded within the status quo who advocate diversity.  Firstly, I want to say that this isn’t to discourage or criticize your efforts.  Rather this is feedback &ndash; because I think regardless of your reasoning, the efforts are beneficial.  Secondly, I’m not an outraged feminist, I want more balance in the world that I live in and I’m naive enough to believe that I don’t need to rant with upcase and bangs to be heard.  I hope my reasoning is loud and clear enough.</p>

<p>So I’ve met a handful of techie folks who are interested in pairing/teaching/mentoring people like me &ndash; &ldquo;newbies&rdquo;, &ldquo;diverse&rdquo;, etc.  (For the record, I don&rsquo;t have a rolodex of potential mentors, so the ones that have been willing &ndash; thank you!) Sometimes it&rsquo;s hard to take you up on your offer and I want to tell you why.  (Yes, I might also have <a href="http://en.wikipedia.org/wiki/Impostor_syndrome">imposter syndrome</a>.)</p>

<p>When I have paired with these folks I find similar patterns of not being open to other ways of thinking.  When I’ve given feedback so that we (as in you and me) can collaborate more effectively, I find that many are unaccustomed to having to think in a non-tech jargon way, or think in metaphors.  Some seem uncomfortable with teaching strategies (that I find so helpful) such as high level to low level, working outside in or inside out, and visual diagrams.  Further, some seem defensive when feedback is given. (A friend told me a story of a time when she was struggling to explain a bug that was happening in safari that wasn&rsquo;t in chrome , her pair told her to &ldquo;go back, and figure out how to describe this to me as if you are the lead&rdquo;.  So she tried. At which he replied, “no! wrong! you’re not getting it.”) <em>Basically when these sorts of things happen I question whether us pairing together is ultimately more about me learning or so you can feel that you are doing right in the world.</em></p>

<p>Okay well I think it’s time for me to declare the obvious &ndash; I grew up an only child and I was pretty independent. I also have lived a fairly privileged life (reread the first line of this post).  But I say this not to justify my potentially indignant, ungrateful attitude but because I want you to know that I’m independently minded and tough on myself too.  I rode dirt bikes as a kid, I learned “computing” playing Where in the World is Carmen Sandiego on my public library’s Apple IIe, my parents immigrated…my parents says that I’m living their dream because I’ve traveled to 25 countries for pleasure, work, sport and political research.  But for what it’s worth, I think what my parents did &ndash; immigrating to a country in their early 20s not knowing the language, in fact not knowing a related language, is far braver than anything I have ever done. (That&rsquo;s my bar.)</p>

<p>So when we talk about encouragement and support, what should we be talking about?  What are our tools?  There are a lot of organizations and efforts to increase numbers.  But here’s what I argue, the next generation of coders doesn’t have to live the same life as the current generation of coders.  And further, learning to code doesn’t have to be so painful.  It doesn’t have to be this idea of “I’m wrong all the time!”  (which is what I thought all the time in bootcamp).  Here are some techniques that I think are instrumental toward building trust, confidence and collaboration (as individuals and as collaborators):</p>

<ol>
<li><p><strong>TDD</strong>:  Regardless of your opinion of DHH’s opening talk at RailsConf (2014) this year, I’m proclaiming my love of TDD.  TDD transforms negative feedback of being “wrong” into “incremental building”.  It’s like a Choose Your Own Adventure with repetition (which also aids in learning).</p></li>
<li><p><strong>“Yes and”</strong>: This was the topic of my first blog post ever and I fully endorse <a href="http://en.wikipedia.org/wiki/Improvisational_theatre">“Yes and”</a> as a sure way not only to collaborate but also to use those creative brain cells to connect things you may never have dreamed.  “Yes and” is an improv technique that comedians, like <a href="http://departments.knox.edu/newsarchive/news_events/2006/x12547.html">Stephen Cobert</a> and <a href="http://women2.com/2012/01/08/tina-feys-rules-for-improv-and-your-career/">Tina Fey</a> in fact (name drop!), use to build on a skit and make the skit a believable reality for the audience.  In a non-improv environment, “Yes and” in itself builds on what is being said.  The person who has risked failure bringing up an idea feels good and you are learning how to appreciate how others are thinking by actively having to adapt (and potentially adopt) their ideas.  (For the record, as I&rsquo;m learning to code, aren&rsquo;t I basically always improvising?)  Anyway, at minimum, yes, try to not to say ‘no’.</p></li>
<li><p><strong>Echoing back and ask questions</strong>:  I’m sure we all know how often miscommunication attributes to lack of understanding.  Here’s the thing: I’m a newbie.  I don’t know all the jargon. (Boy, can I ever grok non-jargon tho.) It’s pretty hard to learn, recall, and act on what feels like a million things at once, like:  code libraries, editor shortcuts, stack implication, domain logic, AND being able to communicate!  Being open to me echoing back what I think you are saying &ndash; this will let you know what I think you&rsquo;re saying.  And try to echo back what you think I’m saying because that tells me what I’m saying means to you, which gives me information and increases the likelihood that I will start to understand your way of thinking, consequently, increasing the chances of picking up jargon.</p></li>
<li><p><strong>Use Rules of Thumb</strong>:  Let’s be honest, it’s easier (and fun) to remember things like: DRY, POODR, MVC, Rule of Three, Single Source of Truth, Arrange Act Assert (AAA).  My brain is trying really hard to learn and recall (see #3) and I’d like to be more efficient.  Let’s take a simple example.  I’ve lived and traveled to countries where driving is on the opposite side to the US.  I used to try to remember where I am, what the driving standard is for that place and then look that direction of oncoming traffic.  Okay that’s a lot of thinking.  Seriously, <em>looking both ways</em> works in every country.  That’s it.  <em>Look both ways.</em></p></li>
<li><p><strong>Zone of Proximal Development</strong>: I learned <a href="http://en.wikipedia.org/wiki/Zone_of_proximal_development">this</a> from a talented dev at Pivotal Labs&hellip;this teaching strategy is: <em>I do you watch, I do you help, You do I help, You do I watch</em>.  I think this could be the base for moving on to <a href="http://c2.com/cgi/wiki?PairProgrammingPingPongPattern">ping pong</a> pairing &ndash; where one person writes the test and the other person makes the test pass.  It&rsquo;s also potentially less awkward because when someone is driving, sometimes I feel like I&rsquo;m interrupting and vice versa sometimes I feel interrupted.  I find ZPD fosters a greater chance of success for a newbie and allows for questions and learning to be comfortable.  All of which build confidence!</p></li>
</ol>


<p>The main idea here is that I am a person that is new to code, not new to life.  How would you feel if all of my examples were technical scuba diving terms? Or the names of the side streets of Melbourne Australia (which coincidentally have amazing art, bars, and cafes)? Or touching your toes as a way to be flexible? Or if I tried to teach you how to write the chinese characters for fire, prisoner and big without teaching you the character for person first?  Sure you’d try to learn it because those things are cool right?  But you might be overwhelmed, even frustrated eventually.  I bet if I took the time to work with you to build a foundation of knowledge that fostered understanding that is in your terms and helped figure out a way to connect those seemingly disparate tidbits of knowledge, you’d learn a lot faster and be able to recall those tidbits the next time an appropriate scenario occurred.</p>

<p>Google is my friend but I&rsquo;d like you to be too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gem.first]]></title>
    <link href="http://glamouracademy.github.io/blog/2013/11/04/gem-dot-first/"/>
    <updated>2013-11-04T20:27:00-05:00</updated>
    <id>http://glamouracademy.github.io/blog/2013/11/04/gem-dot-first</id>
    <content type="html"><![CDATA[<iframe src="https://docs.google.com/presentation/d/1NDaWdQMnxF912zca5nREH7Iq8IHz-EDRvQL-zVlW-20/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variable Scope: How I Learned to Stop Worrying and Love the Ruling Class]]></title>
    <link href="http://glamouracademy.github.io/blog/2013/10/16/variable-scope-how-i-learned-to-stop-worrying-and-love-the-ruling-class/"/>
    <updated>2013-10-16T23:58:00-04:00</updated>
    <id>http://glamouracademy.github.io/blog/2013/10/16/variable-scope-how-i-learned-to-stop-worrying-and-love-the-ruling-class</id>
    <content type="html"><![CDATA[<iframe src="https://docs.google.com/presentation/d/10uozglFTF_Exk8w8AWa1nHI3cLjWv1lcHIVKua7C8-g/embed?start=false&loop=false&delayms=5000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yes And]]></title>
    <link href="http://glamouracademy.github.io/blog/2013/09/27/yes-and/"/>
    <updated>2013-09-27T16:28:00-04:00</updated>
    <id>http://glamouracademy.github.io/blog/2013/09/27/yes-and</id>
    <content type="html"><![CDATA[<p>The art of collaborating in creativity</p>

<p>For anyone who has ever taken an improv class, you&rsquo;ll recognize this fundamental &ndash; &ldquo;Yes And…&rdquo;</p>

<p>First, a disclaimer.  I am not an improv expert, student or even a hardcore fan of improv.  There is an improv school here in New York City called Magnet Theater that offers a free intro class.  A friend of mine is really into improv and I decided to take the class because I had never done improv before, wanted to know more about what my friend loves and also thought it would be a good opportunity for be to be uncomfortable.</p>

<p>There were about 30 people at this class.  We were similar and different of course.  What was important was that we were all there…and soon we&rsquo;d learn that what was really important was not only that were we all there; but, we were all there TOGETHER.</p>

<p>This is a good time to highlight that most people in this class were not super extroverted and there was even a few that were hyper shy.  So, the point here is that this class was participatory and there was a lot of trust and bravery by everyone from and to everyone else.</p>

<p>Expressing yourself can be about different things.  It can be about ego. It can be about the best idea(s).  It can be about connecting.  And it can be about a combination of those things.</p>

<p>What I&rsquo;ve noticed in &lsquo;less-than-ideal&rsquo; communication styles is what I call asynchronous statements.  Basically, people are talking at one another.  Sometimes communication happens; but, to me it&rsquo;s like ripostes (in fencing) and at best a parry (in swordplay) rather than a dance or creating music.  Asynchronous statements are people&rsquo;s ideas that may or may not be related to previous statements.  So then, why collaborate?</p>

<p>I&rsquo;m explicitly asking again: Why collaborate?  Why do you collaborate?  Why do others collaborate?  What is the purpose of collaborating?</p>

<p>What &ldquo;Yes And&rdquo; does so beautifully for improv is create a beliveable universe.  The idea being that the performers must always convince the audience about the world that the performers are creating.  Even if one performer is taking the improv to a place that the other performer does not like, given that both performers want the audience to be entertained, the other performer must accept the first performer&rsquo;s output in order to change the direction.</p>

<p>For example, performer 1 introduces a cat into the improv.  Performer 2 cannot say &ldquo;there is no cat&rdquo; because the audience will be lost and further what is the purpose of declaring &ldquo;there is no cat&rdquo;?  Where does the improv go from there?  Performer 2 can however acknowledge the cat and make it leave &ndash; e.g. &ldquo;Oh! The cat is running away!&rdquo;  The two performers have created a believable universe and storyline.  The audience wonders: What happened to the cat?  Why did the cat run away? In other words, they are collaborated in creation, which is why &ldquo;Yes And&rdquo; is not only useful in improv.</p>

<p>&ldquo;Yes And&rdquo; works well in creative collaborative situations because of the purpose of collaboration &ndash; which is to share ideas and perhaps get the &ldquo;best&rdquo; idea.</p>

<p>&ldquo;Yes And&rdquo;:</p>

<ol>
<li>establishes an agreed upon beginning of the conversation, creates a baseline (e.g. you said this, I hear you, did you mean this)</li>
<li>builds on an agreement by creating a direction (e.g. following the same idea or changing the idea)</li>
<li>introduces a new idea where people are more likely to understand and contribute to because they have context</li>
</ol>


<p>Moreover, &ldquo;Yes And&rdquo; is what I believe to be the best method in collaboration (so far) because not only are people (e.g. participants, audience) getting the benefits of collaboration (as mentioned just above) but also because:</p>

<ol>
<li>it&rsquo;s feel good to be heard</li>
<li>it brings people closer together because they are sharing the same space of building on the idea (rather than REbuilding the idea from the ground)</li>
<li>people share their ideas more freely if they feel comfortable</li>
</ol>


<p>So far, I&rsquo;ve been introducing an idea that I care about but the reason why it&rsquo;s front and center is because I&rsquo;m in week 1 of a programing course.   More abstractly, I&rsquo;m in week 1 of learning something new and I&rsquo;m learning with other people who are also learning.  What&rsquo;s interesting is understanding how other people are thinking and furthering their way of thinking to the goal.  I&rsquo;m impressed with the &ldquo;collaboration&rdquo; between students and the appreciation of the shared knowledge and experience of collaborative learning.  Sure, sometimes, a student will be telling another how to think, or worse, what to do and it&rsquo;s totally understandable right?  There is the whole blind-leading-the-blind and also we all want our fellow students to get their code working and the fastest way to do that is by showing someone the way that we know.  But overall, what I see is a group of people who happen to be students, but by all means really indicating that they are life long learners by:</p>

<p>  • understanding the way someone else is thinking<br>
  • promoting someone else&rsquo;s solution<br>
  • articulating her/his way of thinking to someone else so that s/he understands</p>

<p>We have an opportunity to challenge ourselves, learn about ourselves, learn about something and be a positive influence on another person- with the pragmatic bonus of awesome ideas…let&rsquo;s do more &ldquo;Yes And&rdquo;!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://glamouracademy.github.io/blog/2013/09/25/hello-world/"/>
    <updated>2013-09-25T11:21:00-04:00</updated>
    <id>http://glamouracademy.github.io/blog/2013/09/25/hello-world</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
